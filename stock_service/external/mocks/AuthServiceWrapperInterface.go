// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	auth_service_wrapper "github.com/rysmaadit/finantier_test/stock_service/external/auth_service_wrapper"
	mock "github.com/stretchr/testify/mock"
)

// AuthServiceWrapperInterface is an autogenerated mock type for the AuthServiceWrapperInterface type
type AuthServiceWrapperInterface struct {
	mock.Mock
}

// GetToken provides a mock function with given fields:
func (_m *AuthServiceWrapperInterface) GetToken() (*auth_service_wrapper.GetTokenResponseContract, error) {
	ret := _m.Called()

	var r0 *auth_service_wrapper.GetTokenResponseContract
	if rf, ok := ret.Get(0).(func() *auth_service_wrapper.GetTokenResponseContract); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_service_wrapper.GetTokenResponseContract)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: contract
func (_m *AuthServiceWrapperInterface) ValidateToken(contract *auth_service_wrapper.AuthValidateTokenRequestContract) (*auth_service_wrapper.AuthValidateTokenResponseContract, error) {
	ret := _m.Called(contract)

	var r0 *auth_service_wrapper.AuthValidateTokenResponseContract
	if rf, ok := ret.Get(0).(func(*auth_service_wrapper.AuthValidateTokenRequestContract) *auth_service_wrapper.AuthValidateTokenResponseContract); ok {
		r0 = rf(contract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_service_wrapper.AuthValidateTokenResponseContract)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*auth_service_wrapper.AuthValidateTokenRequestContract) error); ok {
		r1 = rf(contract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
